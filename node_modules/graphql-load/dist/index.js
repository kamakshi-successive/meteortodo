"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var merge_graphql_schemas_1 = require("merge-graphql-schemas");
var Loader = (function () {
    function Loader() {
        this.typeDefs = [];
        this.resolvers = [];
    }
    Loader.prototype.load = function (modules) {
        var _this = this;
        modules = Array.isArray(modules) ? modules : [modules];
        modules.forEach(function (module) {
            if (!module) {
                return;
            }
            var typeDefs = module.typeDefs, resolvers = module.resolvers;
            if (resolvers) {
                if (Array.isArray(resolvers)) {
                    (_a = _this.resolvers).push.apply(_a, resolvers);
                }
                else {
                    _this.resolvers.push(resolvers);
                }
            }
            if (typeDefs) {
                if (Array.isArray(typeDefs)) {
                    (_b = _this.typeDefs).push.apply(_b, typeDefs);
                }
                else {
                    _this.typeDefs.push(typeDefs);
                }
            }
            var _a, _b;
        });
    };
    Loader.prototype.getSchema = function () {
        return {
            typeDefs: merge_graphql_schemas_1.mergeTypes(this.typeDefs, { all: true }),
            resolvers: merge_graphql_schemas_1.mergeResolvers(this.resolvers),
        };
    };
    Loader.prototype.getTypeDefs = function () {
        return this.typeDefs;
    };
    Loader.prototype.getResolvers = function () {
        return this.resolvers;
    };
    Loader.wrap = function (rootType, _module) {
        var modules = Array.isArray(_module) ? _module : [_module];
        var typeDefs = [];
        var resolvers = [];
        modules.forEach(function (module) {
            if (module.typeDefs) {
                var moduleTypeDefs = Array.isArray(module.typeDefs)
                    ? module.typeDefs
                    : [module.typeDefs];
                moduleTypeDefs.forEach(function (moduleTypeDef) {
                    typeDefs.push("type " + rootType + " { " + moduleTypeDef + " }");
                });
            }
            if (module.resolvers) {
                var moduleResolvers = Array.isArray(module.resolvers)
                    ? module.resolvers
                    : [module.resolvers];
                moduleResolvers.forEach(function (moduleResolver) {
                    resolvers.push((_a = {},
                        _a[rootType] = moduleResolver,
                        _a));
                    var _a;
                });
            }
        });
        return {
            typeDefs: typeDefs,
            resolvers: resolvers,
        };
    };
    return Loader;
}());
exports.Loader = Loader;
var instance = new Loader();
exports.default = instance;
var load = instance.load.bind(instance);
exports.load = load;
var getSchema = instance.getSchema.bind(instance);
exports.getSchema = getSchema;
var wrap = Loader.wrap;
exports.wrap = wrap;
//# sourceMappingURL=index.js.map